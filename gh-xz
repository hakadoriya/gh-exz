#!/usr/bin/env bash
set -E -e -u -o pipefail

declare -r LOGSH_LEVEL=${LOGSH_LEVEL:-101}
declare -r EXE_FILENAME="gh-xz"
declare -r LF=$'\n'
declare -r GH_XZ_REPO="https://github.com/hakadoriya/gh-xz"

# LICENSE: https://github.com/hakadoriya/log.sh/blob/HEAD/LICENSE
# Common
if [ "${LOGSH_COLOR:-}" ] || [ -t 2 ]; then LOGSH_COLOR=true; else LOGSH_COLOR=''; fi
_logshRFC3339() { date "+%Y-%m-%dT%H:%M:%S%z" | sed "s/\(..\)$/:\1/"; }
_logshCmd() { for a in "$@"; do if echo "${a:-}" | grep -Eq "[[:blank:]]"; then printf "'%s' " "${a:-}"; else printf "%s " "${a:-}"; fi; done | sed "s/ $//"; }
# Color
LogshDefault() { test "  ${LOGSH_LEVEL:-0}" -gt 000 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;35m}  DEFAULT${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshDebug() { test "    ${LOGSH_LEVEL:-0}" -gt 100 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;34m}    DEBUG${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshInfo() { test "     ${LOGSH_LEVEL:-0}" -gt 200 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;32m}     INFO${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshNotice() { test "   ${LOGSH_LEVEL:-0}" -gt 300 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;36m}   NOTICE${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshWarn() { test "     ${LOGSH_LEVEL:-0}" -gt 400 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;33m}     WARN${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshWarning() { test "  ${LOGSH_LEVEL:-0}" -gt 400 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;33m}  WARNING${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshError() { test "    ${LOGSH_LEVEL:-0}" -gt 500 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;31m}    ERROR${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshCritical() { test " ${LOGSH_LEVEL:-0}" -gt 600 || echo "$*" | awk "{print \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;1;31m} CRITICAL${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshAlert() { test "    ${LOGSH_LEVEL:-0}" -gt 700 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;41m}    ALERT${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshEmergency() { test "${LOGSH_LEVEL:-0}" -gt 800 || echo "$*" | awk "{print \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;1;41m}EMERGENCY${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
LogshExec() { LogshDebug "$ $(_logshCmd "$@")" && "$@"; }
LogshRun() { _dlm="####R#E#C#D#E#L#I#M#I#T#E#R####" && _all=$({ _out=$("$@") && _rtn=$? || _rtn=$? && printf "\n%s" "${_dlm:?}${_out:-}" && return "${_rtn:-0}"; } 2>&1) && _rtn=$? || _rtn=$? && _dlmno=$(echo "${_all:-}" | sed -n "/${_dlm:?}/=") && _cmd=$(_logshCmd "$@") && _stdout=$(echo "${_all:-}" | tail -n +"${_dlmno:-1}" | sed "s/^${_dlm:?}//") && _stderr=$(echo "${_all:-}" | head -n "${_dlmno:-1}" | grep -v "^${_dlm:?}") && LogshInfo "$ ${_cmd:-}" && LogshInfo "${_stdout:-}" && { [ -z "${_stderr:-}" ] || LogshWarning "${_stderr:?}"; } && return "${_rtn:-0}"; }

SubcommandGetAnnotatedComment() {
  gh_repo=${1:-${GH_REPO:-}}                                           # Target Repository (e.g.: user/repo)
  gh_pr_number=${2:-${GH_PR_NUMBER:-}}                                 # PR number
  gh_comment_annotation_string=${3:-${GH_COMMENT_ANNOTATION_STRING:-}} # Annotation string in the comment to be updated

  # Get PR comments containing the annotation string
  gh_comment_ids=$(
    LogshExec \
      gh api \
      --paginate \
      "/repos/${gh_repo:?}/issues/${gh_pr_number:?}/comments" \
      --jq ".[] | select(.body | contains(\"${gh_comment_annotation_string//\"/\\\"}\")) | .id"
  )

  # If no comment that contains the annotation string is found, return 1
  if [[ -z "${gh_comment_ids:-}" ]]; then
    return 1
  fi

  # Abnormal termination if the ID is not one
  if [[ $(echo "${gh_comment_ids:?}" | wc -l) -ne 1 ]]; then
    LogshError "Error: Multiple comments containing the annotation string \"${gh_comment_annotation_string:?}\" found."
    LogshError "Comment IDs: ${gh_comment_ids//$'\n'/, }"
    while read -r comment_id; do
      LogshError "${gh_pr_url:?}#issuecomment-${comment_id}"
    done <<<"${gh_comment_ids:?}"
    return 1
  fi
  comment_id="${gh_comment_ids:?}"

  # Return the comment body
  LogshExec \
    gh api \
    --paginate \
    "/repos/${gh_repo:?}/issues/comments/${comment_id:?}" \
    --jq ".body"
}

SubcommandPutAnnotatedComment() {
  # Set the required variables
  gh_repo=${1:-${GH_REPO:-}}                                           # Target Repository (e.g.: user/repo)
  gh_pr_number=${2:-${GH_PR_NUMBER:-}}                                 # PR number
  gh_comment_annotation_string=${3:-${GH_COMMENT_ANNOTATION_STRING:-}} # Annotation string in the comment to be updated
  gh_comment_new_body=${4:-${GH_COMMENT_NEW_BODY:-}}                   # New comment body

  if [[ -z "${gh_repo:-}" || -z "${gh_pr_number:-}" || -z "${gh_comment_annotation_string:-}" || -z "${gh_comment_new_body:-}" ]]; then
    SubcommandUsageAndReturn 1
  fi

  # If the new comment body is a file (or - means stdin), read the file
  if [[ "${gh_comment_new_body:?}" =~ ^@ ]] && ([[ -e "${gh_comment_new_body#@}" ]] || [[ "${gh_comment_new_body#@}" = - ]]); then
    gh_comment_new_body_file=/tmp/gh-xz-$$-put-annotated-comment-new-body-file
    cat "${gh_comment_new_body#@}" >"${gh_comment_new_body_file:?}"
    chmod 600 "${gh_comment_new_body_file:?}"
    trap "rm -f ${gh_comment_new_body_file:?}" EXIT
  fi

  # If the annotation string does not start with '<!--' and end with '-->', add them
  if ! [[ "${gh_comment_annotation_string:?}" =~ ^\<\!--.*--\>$ ]]; then
    gh_comment_annotation_string="<!-- ${gh_comment_annotation_string:?} -->"
  fi

  # If the new comment body does not end with the annotation string, add a newline and the annotation string
  if [[ -z "${gh_comment_new_body_file:-}" ]] && (! [[ "${gh_comment_new_body:?}" =~ .*${gh_comment_annotation_string:?}\s*$ ]]); then
    gh_comment_new_body="${gh_comment_new_body:?}${LF:?}${LF:?}${gh_comment_annotation_string:?}"
  elif [[ -n "${gh_comment_new_body_file:-}" ]] && (! [[ "$(cat "${gh_comment_new_body_file:?}")" =~ .*${gh_comment_annotation_string:?}\s*$ ]]); then
    echo "${LF:?}${LF:?}${gh_comment_annotation_string:?}" >>"${gh_comment_new_body_file:?}"
  fi

  gh_pr_url="https://github.com/${gh_repo:?}/pull/${gh_pr_number:?}"

  # Get PR comments containing the annotation string
  gh_comment_ids=$(
    LogshExec \
      gh api \
      --paginate \
      "/repos/${gh_repo:?}/issues/${gh_pr_number:?}/comments" \
      --jq ".[] | select(.body | contains(\"${gh_comment_annotation_string//\"/\\\"}\")) | .id"
  )

  # If no comment that contains the annotation string is found, Insert a new one
  if [[ -z "${gh_comment_ids:-}" ]]; then
    body_value="${gh_comment_new_body:?}"
    [[ -z "${gh_comment_new_body_file:-}" ]] || body_value="@${gh_comment_new_body_file:?}"
    LogshExec \
      gh api \
      --method POST \
      --header "Accept: application/vnd.github+json" \
      "/repos/${gh_repo:?}/issues/${gh_pr_number:?}/comments" \
      -f "body=${body_value:?}"
    # early return
    return 0
  fi

  # Abnormal termination if the ID is not one
  if [[ $(echo "${gh_comment_ids:?}" | wc -l) -ne 1 ]]; then
    LogshError "Error: Multiple comments containing the annotation string \"${gh_comment_annotation_string:?}\" found."
    LogshError "Comment IDs: ${gh_comment_ids//$'\n'/, }"
    while read -r comment_id; do
      LogshError "${gh_pr_url:?}#issuecomment-${comment_id}"
    done <<<"${gh_comment_ids:?}"
    return 1
  fi
  comment_id="${gh_comment_ids:?}"

  # Update the comment
  body_value="${gh_comment_new_body:?}"
  [[ -z "${gh_comment_new_body_file:-}" ]] || body_value="@${gh_comment_new_body_file:?}"
  LogshExec \
    gh api \
    --method PATCH \
    --header "Accept: application/vnd.github+json" \
    "/repos/${gh_repo:?}/issues/comments/${comment_id:?}" \
    -F "body=${body_value:?}"
}

SubcommandSelfInstall() {
  LogshExec gh extension install "${GH_XZ_REPO:?}"
}

SubcommandSelfUpdate() {
  LogshExec gh extension upgrade "${EXE_FILENAME:?}"
}

SubcommandUsageAndReturn() {
  cat <<EOF
${EXE_FILENAME:?} - gh command eXtension to utilitieZ.

Usage:
  ${EXE_FILENAME:?} <SUBCOMMAND>

SUBCOMMAND:
    get-annotated-comment
        Get a comment that has a specific annotation string in a issue or pull request.
        Usage:
          ${EXE_FILENAME:?} get-annotated-comment <OWNER/REPOSITORY> <PR_NUMBER> <ANCHOR_STRING>
        e.g.:
          ${EXE_FILENAME:?} get-annotated-comment owner/repo 123 "annotation"
    put-annotated-comment
        Put a comment that has a specific annotation string in a issue or pull request.
        Usage:
          ${EXE_FILENAME:?} put-annotated-comment <OWNER/REPOSITORY> <PR_NUMBER> <ANCHOR_STRING> <COMMENT_NEW_BODY_CONTENT|COMMENT_NEW_BODY_FILE>
        e.g.:
          ${EXE_FILENAME:?} put-annotated-comment owner/repo 123 "annotation" "This is a new comment."
          ${EXE_FILENAME:?} put-annotated-comment owner/repo 123 "annotation" @./comment.md
          cat ./comment.md | ${EXE_FILENAME:?} put-annotated-comment owner/repo 123 "annotation" @-
    help, usage
        Show this help message.
        Usage:
          ${EXE_FILENAME:?} help
EOF
  return "${1:-0}"
}

Main() {
  local subcmd="${1:-}"

  case "${subcmd:-}" in
  "get-annotated-comment")
    shift
    SubcommandGetAnnotatedComment "$@"
    ;;
  "put-annotated-comment")
    shift
    SubcommandPutAnnotatedComment "$@"
    ;;
  "self-install")
    SubcommandSelfInstall
    ;;
  "self-update")
    SubcommandSelfUpdate
    ;;
  "help" | "usage")
    SubcommandUsageAndReturn 0
    ;;
  *)
    SubcommandUsageAndReturn 1
    ;;
  esac
}

Main "$@"
