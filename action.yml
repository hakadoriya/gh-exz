name: gh-pr-update-comment
# MEMO: Description must be less than 125 characters.
description: 'A workflow to update a comment in a pull request.'
author: 'hakadoriya'

branding:
  icon: search
  color: gray-dark

inputs:
  repo:
    description: 'Target Repository (e.g.: user/repo)'
    required: true
  pr-number:
    description: 'PR number'
    required: true
  comment-anchor-string:
    description: 'Anchor string in the comment to be updated'
    required: true
  comment-new-body:
    description: 'New comment body'
    required: true
  debug:
    description: 'Debug mode'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: gh-pr-update-comment
      id: gh-pr-update-comment
      shell: 'bash'
      env:
        LOGSH_COLOR: 'true'
      run: |
        #!/usr/bin/env bash
        set -E -e -u -o pipefail

        # LICENSE: https://github.com/hakadoriya/log.sh/blob/HEAD/LICENSE
        # Common
        if [ "${LOGSH_COLOR:-}" ] || [ -t 2 ]; then LOGSH_COLOR=true; else LOGSH_COLOR=''; fi
        _logshRFC3339() { date "+%Y-%m-%dT%H:%M:%S%z" | sed "s/\(..\)$/:\1/"; }
        _logshCmd() { for a in "$@"; do if echo "${a:-}" | grep -Eq "[[:blank:]]"; then printf "'%s' " "${a:-}"; else printf "%s " "${a:-}"; fi; done | sed "s/ $//"; }
        # Color
        LogshDefault() { test "  ${LOGSH_LEVEL:-0}" -gt 000 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;35m}  DEFAULT${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshDebug() { test "    ${LOGSH_LEVEL:-0}" -gt 100 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;34m}    DEBUG${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshInfo() { test "     ${LOGSH_LEVEL:-0}" -gt 200 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;32m}     INFO${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshNotice() { test "   ${LOGSH_LEVEL:-0}" -gt 300 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;36m}   NOTICE${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshWarn() { test "     ${LOGSH_LEVEL:-0}" -gt 400 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;33m}     WARN${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshWarning() { test "  ${LOGSH_LEVEL:-0}" -gt 400 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;33m}  WARNING${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshError() { test "    ${LOGSH_LEVEL:-0}" -gt 500 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;31m}    ERROR${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshCritical() { test " ${LOGSH_LEVEL:-0}" -gt 600 || echo "$*" | awk "{print \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;1;31m} CRITICAL${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshAlert() { test "    ${LOGSH_LEVEL:-0}" -gt 700 || echo "$*" | awk "{print   \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;41m}    ALERT${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshEmergency() { test "${LOGSH_LEVEL:-0}" -gt 800 || echo "$*" | awk "{print \"$(_logshRFC3339) [${LOGSH_COLOR:+\\033[0;1;41m}EMERGENCY${LOGSH_COLOR:+\\033[0m}] \"\$0\"\"}" 1>&2; }
        LogshExec() { LogshDebug "$ $(_logshCmd "$@")" && "$@"; }
        LogshRun() { _dlm="####R#E#C#D#E#L#I#M#I#T#E#R####" && _all=$({ _out=$("$@") && _rtn=$? || _rtn=$? && printf "\n%s" "${_dlm:?}${_out:-}" && return "${_rtn:-0}"; } 2>&1) && _rtn=$? || _rtn=$? && _dlmno=$(echo "${_all:-}" | sed -n "/${_dlm:?}/=") && _cmd=$(_logshCmd "$@") && _stdout=$(echo "${_all:-}" | tail -n +"${_dlmno:-1}" | sed "s/^${_dlm:?}//") && _stderr=$(echo "${_all:-}" | head -n "${_dlmno:-1}" | grep -v "^${_dlm:?}") && LogshInfo "$ ${_cmd:-}" && LogshInfo "${_stdout:-}" && { [ -z "${_stderr:-}" ] || LogshWarning "${_stderr:?}"; } && return "${_rtn:-0}"; }

        __main__() {
          # Set the required variables
          gh_repo=${1:-${GH_REPO:-}}                                   # Target Repository (e.g.: user/repo)
          gh_pr_number=${2:-${GH_PR_NUMBER:-}}                         # PR number
          gh_comment_anchor_string=${3:-${GH_COMMENT_ANCHOR_STRING:-}} # Anchor string in the comment to be updated
          gh_comment_new_body=${4:-${GH_COMMENT_NEW_BODY:-}}           # New comment body

          gh_pr_url="https://github.com/${gh_repo:?}/pull/${gh_pr_number:?}"

          if [[ -z "${gh_repo:-}" || -z "${gh_pr_number:-}" || -z "${gh_comment_anchor_string:-}" || -z "${gh_comment_new_body:-}" ]]; then
            LogshError "Usage: $0 <repository> <pr_number> <anchor_string> <new_body>"
            return 1
          fi

          # Get PR comments containing the anchor string
          gh_comment_ids=$(
            LogshExec \
              gh api \
              --paginate \
              "/repos/${gh_repo:?}/issues/${gh_pr_number:?}/comments" \
              --jq ".[] | select(.body | contains(\"${gh_comment_anchor_string//\"/\\\"}\")) | .id"
          )

          if [[ -z "${gh_comment_ids:-}" ]]; then
            LogshError "Error: No comment containing the anchor string \"${gh_comment_anchor_string:?}\" found in ${gh_pr_url:?}"
            return 1
          fi

          # Abnormal termination if the ID is not one
          if [[ $(echo "${gh_comment_ids:?}" | wc -l) -ne 1 ]]; then
            LogshError "Error: Multiple comments containing the anchor string \"${gh_comment_anchor_string:?}\" found."
            LogshError "Comment IDs: ${gh_comment_ids//$'\n'/, }"
            while read -r comment_id; do
              LogshError "${gh_pr_url:?}#issuecomment-${comment_id}"
            done <<<"${gh_comment_ids}"
            return 1
          fi

          # Update the comment
          comment_id="${gh_comment_ids:?}"
          LogshExec \
            gh api \
            --method PATCH \
            --header "Accept: application/vnd.github+json" \
            "/repos/${gh_repo:?}/issues/comments/${comment_id:?}" \
            -F "body=${gh_comment_new_body:?}"

          # shellcheck disable=SC2181
          if [[ $? -eq 0 ]]; then
            LogshInfo "Comment updated successfully."
          else
            LogshError "Failed to update the comment."
            return 1
          fi
        }

        __main__ '${{ inputs.repo }}' '${{ inputs.pr-number }}' '${{ inputs.comment-anchor-string }}' '${{ inputs.comment-new-body }}'

    - name: DEBUG
      if: always() && ${{ inputs.debug == 'true' }}
      shell: bash
      run: |
        cat <<'DEBUG_DOC'
        == DEBUG =======================================================
        -- inputs -----------------------------------------------------
        repo: ${{ inputs.repo }}
        pr-number: ${{ inputs.pr-number }}
        comment-anchor-string: ${{ inputs.comment-anchor-string }}
        comment-new-body: ${{ inputs.comment-new-body }}
        debug: ${{ inputs.debug }}
        -- github -----------------------------------------------------
        github.event_name: ${{ github.event_name }}
        github.ref: ${{ github.ref }}
        -- toJSON(github) ----------------------------------------------
        ${{ toJSON(github) }}
        ================================================================
        DEBUG_DOC
